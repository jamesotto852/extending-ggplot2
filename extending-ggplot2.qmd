---
format: 
  revealjs:
    theme: [simple, presentation.css]
    auto-animate-easing: ease-in-out
    footer: "James Otto (Baylor University)"
    self-contained: false
    slide-number: true
    df-print: paged
knitr:
  opts_chunk: 
    fig-format: png
    echo: true
    collapse: true
    comment: "#>"
---


```{r setup_environment}
#| include: false
library("here")
library("tidyverse") 
library("patchwork")
library("ggdensity")
library("palmerpenguins")

theme_set(theme_bw(13)) 
theme_update(
  panel.grid.minor = element_blank()
)

# Masking default method to hide rownames (mildly dangerous!)
# print.data.frame <- \(x) base::print.data.frame(x, row.names = FALSE)

```

# Introduction

```{r}
#| echo: false
p1 <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point()

p2 <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point()

p3 <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, fill = species)) +
  ggdensity::geom_hdr()

p4 <- ggplot(penguins, aes(x = bill_length_mm, y = species)) +
  ggbeeswarm::geom_quasirandom()

p5 <- ggplot(penguins, aes(x = bill_length_mm, y = species, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient() +
  scale_fill_viridis_c(name = "bill_length_mm", option = "C")

aligned_plots <- align_patches(p1, p2, p3, p4, p5)
```

## {data-menu-title="ggplot2 ex 1" .smaller}

```{r}
#| eval: false
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point()
```
```{r}
#| echo: false
aligned_plots[[1]]
```

## {data-menu-title="ggplot2 ex 2" .smaller}

```{r}
#| eval: false
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point()
```
```{r}
#| echo: false
aligned_plots[[2]]
```

## {data-menu-title="ggplot2 extension ex (ggdensity)" .smaller}

```{r}
#| eval: false
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, fill = species)) +
  ggdensity::geom_hdr()
```
```{r}
#| echo: false
aligned_plots[[3]]
```

## {data-menu-title="ggplot2 extension ex (ggbeeswarm)" .smaller}

```{r}
#| eval: false
ggplot(penguins, aes(x = bill_length_mm, y = species)) +
  ggbeeswarm::geom_quasirandom()
```
```{r}
#| echo: false
aligned_plots[[4]]
```

## {data-menu-title="ggplot2 extension ex (ggridges)" .smaller}

```{r}
#| eval: false
ggplot(penguins, aes(x = bill_length_mm, y = species, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient()
```
```{r}
#| echo: false
aligned_plots[[5]]
```


<!-- --- -->

<!-- ```{r} -->
<!-- penguins |> -->
<!--   drop_na() |> -->
<!--   group_by(species) |> -->
<!--   summarize(mean = mean(bill_length_mm), sd = sd(bill_length_mm)) |> -->
<!--   ggplot(aes(y = species, xdist = distributional::dist_normal(mean, sd))) + -->
<!--   ggdist::stat_halfeye() -->
<!-- ``` -->



# A first look at **ggproto** objects

## {data-menu-title="GeomPoint 1" auto-animate=true}

```{r}
df <- data.frame(
  x = rnorm(10),
  y = rnorm(10)
)
```

## {data-menu-title="GeomPoint 2" auto-animate=true}
```{r}
#| include: false
set.seed(1)
```
```{r}
df <- data.frame(
  x = rnorm(10),
  y = rnorm(10)
)

df
```

## {data-menu-title="GeomPoint 3"}

```{r}
ggplot(df, aes(x, y)) +
  geom_point()
```

## {data-menu-title="GeomPoint 4"}

```{r, class.output = "r"}
#| code-line-numbers: "false" 
#| comment: ""
#| collapse: false

geom_point
```

## {data-menu-title="GeomPoint 5"}

```{r}
ggplot(df, aes(x, y)) +
  layer(geom = GeomPoint, stat = StatIdentity, position = "identity")
```

## {data-menu-title="GeomPoint 6"}

**ggplot2** is built on the ggproto object oriented system.

`GeomPoint` and `StatIdentity` are each classes\* with methods and fields that encode the relevant 
procedures and defaults to create a scatterplot.

## {data-menu-title="GeomPoint 7"}

```{r}
#| code-line-numbers: "|4" 
GeomPoint
```

## {data-menu-title="GeomPoint 8"}

```{r}
GeomPoint$default_aes
```

## {data-menu-title="GeomPoint 9"}

```{r}
#| code-line-numbers: "8" 
GeomPoint
```

## {data-menu-title="GeomPoint 10"}

<!-- Slightly out of order to get caught up in details on Geoms here: coord$transform() and pointsGrob() -->
<!-- Just point out, mention that we'll look more at these ideas later when we make our own Geom -->
```{r}
GeomPoint$draw_panel
```

## {data-menu-title="GeomPointNew 1"}

It is simple to extend via inheritance,
creating `GeomPointNew` from `GeomPoint` with a few adjustments to the default aesthetic options.


:::{.fragment}

<!-- Maybe explain what `ggproto()` is? -->

```{r}
GeomPointNew <- ggproto("GeomPointNew", GeomPoint,
                        
  default_aes = aes(
    shape = 21,
    colour = "black",
    size = 2,
    fill = "slateblue",
    alpha = NA,
    stroke = .5
  )
  
)
```

:::

## {data-menu-title="GeomPointNew 2"}

```{r}
#| code-line-numbers: "|4" 
GeomPointNew
```

## {data-menu-title="GeomPointNew 3"}

```{r}
GeomPointNew$default_aes
```

## {data-menu-title="GeomPointNew 4"}

```{r}
#| code-line-numbers: "8" 
GeomPointNew
```

## {data-menu-title="GeomPointNew 5"}

```{r}
GeomPointNew$draw_panel
```

## {data-menu-title="GeomPointNew 6"}

```{r}
ggplot(df, aes(x, y)) +
  layer(geom = GeomPointNew, stat = StatIdentity, position = "identity")
```

## {data-menu-title="GeomPointNew 7"}

```{r}
#| code-line-numbers: "|11" 
geom_point_new <- function(mapping = NULL, data = NULL, 
                           stat = "identity", position = "identity", 
                           ...,
                           na.rm = FALSE,
                           show.legend = NA,
                           inherit.aes = TRUE) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomPointNew,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      na.rm = na.rm,
      ...
    )
  )
}
```

## {data-menu-title="GeomPointNew 8"}

```{r}
ggplot(df, aes(x, y)) +
  geom_point_new()
```


# Extending stats <br> (traveling salesperson)

## {data-menu-title="salesperson intro 1"}

<!-- Img source: https://getcircuit.com/teams/blog/what-is-the-traveling-salesman-problem -->
![](images/TSP.png){fig-align="center"}

## {data-menu-title="salesperson intro 2"}

```{r}
ggplot(df, aes(x, y)) +
  geom_point()
```

## {data-menu-title="salesperson intro 3" auto-animate=true}

```{r}
library("TSP")

dist_mat <- dist(df, diag = TRUE, upper = TRUE)
atsp <- as.ATSP(dist_mat)
tour <- solve_TSP(atsp)
```

## {data-menu-title="salesperson intro 4" auto-animate=true}

```{r}
library("TSP")

dist_mat <- dist(df, diag = TRUE, upper = TRUE)
atsp <- as.ATSP(dist_mat)
tour <- solve_TSP(atsp)

tour
```

## {data-menu-title="salesperson intro 5" auto-animate=true}

```{r}
library("TSP")

dist_mat <- dist(df, diag = TRUE, upper = TRUE)
atsp <- as.ATSP(dist_mat)
tour <- solve_TSP(atsp)

str(tour)
```


## {data-menu-title="salesperson intro 6" auto-animate=true}

```{r}
df_sorted <- df[tour,]
```

## {data-menu-title="salesperson intro 7" auto-animate=true}

```{r}
df_sorted <- df[tour,]

df_sorted
```

## {data-menu-title="salesperson intro 8"}

```{r}
ggplot(df_sorted, aes(x, y)) +
  geom_path() +
  geom_point_new() 

```

## {data-menu-title="StatSalesperson 1"}

```{r}
StatSalesperson <- ggproto("StatSalesperson", Stat,
                           
  compute_group = function(data, scales) {
    
    dist_mat <- dist(data[,c("x", "y")], diag = TRUE, upper = TRUE)
    atsp <- as.ATSP(dist_mat)
    tour <- solve_TSP(atsp)
    
    data[tour,]
    
  },
  
  required_aes = c("x", "y")                     
)
```

## {data-menu-title="StatSalesperson 2"}

```{r}
stat_salesperson <- function(mapping = NULL, data = NULL, 
                       geom = GeomPath, position = "identity",
                       ...,
                       na.rm = FALSE, 
                       show.legend = NA, 
                       inherit.aes = TRUE) {
  layer(
    stat = StatSalesperson, data = data, mapping = mapping, geom = geom, 
    position = position, show.legend = show.legend, inherit.aes = inherit.aes,
    params = list(na.rm = na.rm, ...)
  )
}
```

## {data-menu-title="StatSalesperson 3"}

```{r}
ggplot(df, aes(x, y)) +
  stat_salesperson() +
  geom_point_new() 

```

## {data-menu-title="StatSalesperson 4"}

```{r}
StatSalesperson <- ggproto("StatSalesperson",  Stat,
                           
  compute_group = function(data, scales, method = "nearest_insertion") {
    
    dist_mat <- dist(data[,c("x", "y")], diag = TRUE, upper = TRUE)
    atsp <- as.ATSP(dist_mat)
    tour <- solve_TSP(atsp, method)
    
    data[tour,]
    
  },
  
  required_aes = c("x", "y")                     
)
```

## {data-menu-title="StatSalesperson 5"}

```{r}
stat_salesperson <- function(mapping = NULL, data = NULL, 
                       geom = GeomPath, position = "identity",
                       ...,
                       method = "nearest_insertion",
                       na.rm = FALSE, 
                       show.legend = NA, 
                       inherit.aes = TRUE) {
  layer(
    stat = StatSalesperson, 
    data = data,
    mapping = mapping,
    geom = geom,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      method = method,
      na.rm = na.rm,
      ...
    )
  )
}
```

## {data-menu-title="StatSalesperson 6"}

```{r}
ggplot(df, aes(x, y)) +
  stat_salesperson(method = "identity") +
  geom_point_new() 
```

## {data-menu-title="StatSalesperson 7"}

```{r}
ggplot(df, aes(x, y)) +
  stat_salesperson(method = "random") +
  geom_point_new() 
```

## {data-menu-title="StatSalesperson 8"}

```{r}
ggplot(df, aes(x, y)) +
  stat_salesperson() +
  geom_point_new() 
```

## {data-menu-title="StatSalesperson 9"}

```{r}
GeomSalesperson <- ggproto("GeomSalesperson", GeomPath)

geom_salesperson <- function(mapping = NULL, data = NULL, 
                             stat = StatSalesperson, position = "identity", 
                             ...,
                             na.rm = FALSE,
                             show.legend = NA,
                             inherit.aes = TRUE) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomSalesperson,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      na.rm = na.rm,
      ...
    )
  )
}

```

## {data-menu-title="StatSalesperson 10"}

```{r}
ggplot(df, aes(x, y)) +
  geom_salesperson() +
  geom_point_new() 

```

# Extending geoms (complete graphs)

## {data-menu-title="complete graphs intro 1"}

![](images/CompleteGraphs.svg){fig-align="center"}


## {data-menu-title="complete graphs intro 2"}

```{r}
df_circle <- data.frame(
  x = cos(seq(0, 2*pi, length.out = 11))[-11],
  y = sin(seq(0, 2*pi, length.out = 11))[-11]
)

df_circle
```

## {data-menu-title="complete graphs intro 3"}

```{r}
df_expanded <- df_circle[rep(1:nrow(df_circle), each = nrow(df_circle)), ]

df_expanded
```

## {data-menu-title="complete graphs intro 4"}

```{r}
df_expanded$xend <- rep(df_circle$x, times = nrow(df_circle))
df_expanded$yend <- rep(df_circle$y, times = nrow(df_circle))

df_expanded
```

## {data-menu-title="complete graphs intro 5"}

```{r}
ggplot(df_expanded, aes(x, y, xend = xend, yend = yend)) +
  geom_segment() +
  coord_fixed()
```

## A note on "Grobs" {data-menu-title="Grobs discussion 1"}

::: {.incremental}

* Grobs are the fundamental building blocks of graphics in R,
the "graphical primitives".
* These are the objects **ggplot2**'s `Geom` classes
use to "draw".
* Paul Murrell's ["R Graphics"](https://www.stat.auckland.ac.nz/~paul/RG2e/) is a good resource to learn more about Grobs (and more generally, **grid**)

:::

## {data-menu-title="Grobs discussion 2"}

```{r}
#| fig-align: "center"
line_segments <- 
  grid::segmentsGrob(
    x0 = seq(.1,  .9,  length = 10),
    x1 = seq(.15, .95, length = 10),
    y0 = rep(.05,      length = 10),
    y1 = rep(.95,      length = 10)
  )

grid::grid.draw(line_segments)
```

## {data-menu-title="Grobs discussion 3"}

```{r}
#| code-line-numbers: "|1,19-23" 
GeomSegment$draw_panel
```


<!-- ## {transition="fade"} -->

<!-- ```{r} -->
<!-- #| fig-align: "center" -->
<!-- # `grid.*()` is equivalent to `*Grob()` |> `grid.draw()` -->
<!-- # (we will need this later) -->

<!-- grid::grid.segments( -->
<!--   x0 = seq(.1,  .9,  length = 10), -->
<!--   x1 = seq(.15, .95, length = 10), -->
<!--   y0 = rep(.05,      length = 10), -->
<!--   y1 = rep(.95,      length = 10) -->
<!-- ) -->
<!-- ``` -->

## {data-menu-title="GeomComplete 1"}

```{r}
#| code-line-numbers: "1|14-32|16-18|20|22-30|3-12|34" 
GeomComplete <- ggproto("GeomComplete", Geom,
                        
  required_aes = c("x", "y"),
  
  default_aes = aes(
    colour = "black",
    linewidth = 0.5,
    linetype = 1,
    alpha = NA
  ),
  
  non_missing_aes = c("linetype", "linewidth", "shape"),
  
  draw_panel = function(data, panel_params, coord) {
    
    data_expanded <- data[rep(1:nrow(data), each = nrow(data)), ]
    data_expanded$xend <- rep(data$x, times = nrow(data))
    data_expanded$yend <- rep(data$y, times = nrow(data))
    
    coord <- coord$transform(data_expanded, panel_params)
    
    grid::segmentsGrob(coord$x, coord$y, coord$xend, coord$yend,
      default.units = "native",
      gp = grid::gpar(
        col = alpha(coord$colour, coord$alpha),
        fill = alpha(coord$colour, coord$alpha),
        lwd = coord$linewidth * .pt,
        lty = coord$linetype
      )
    )
    
  },
 
  draw_key = draw_key_path
  
)
```

## {data-menu-title="GeomComplete 2"}

```{r}
geom_complete <- function(mapping = NULL, data = NULL, 
                          stat = StatIdentity, position = "identity", 
                          ...,
                          na.rm = FALSE,
                          show.legend = NA,
                          inherit.aes = TRUE) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomComplete,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      na.rm = na.rm,
      ...
    )
  )
}
```

## {data-menu-title="GeomComplete 3"}

```{r}
ggplot(df_circle, aes(x, y)) +
  geom_complete() +
  coord_fixed()
```

## {data-menu-title="GeomComplete 4"}

:::{.r-stack}

:::{.fragment .semi-fade-out fragment-index=1}

```{r}
ggplot(df, aes(x, y)) +
  geom_complete()
```
:::

:::{.fragment fragment-index=1}

:::{.callout-note appearance="simple"}
## A classic question

Is this a statistical transformation or a graphical operation?
:::

:::

:::

## {data-menu-title="Stats vs Geoms 1"}

### An aside: `Stat` vs `Geom` implementations 

* `Stat`s are used for transformations[^1] of data
* `Geom`s are used for converting data structures into their visual representations[^2]

[^1]: sometimes these are statistical transformations
[^2]: and "simple" transformations of data

## {data-menu-title="Stats vs Geoms 2"}

### An aside: `Stat` vs `Geom` implementations 

::: {.incremental style="size: .7em"}

Things to consider when deciding which to implement:

* Can you implement a `Stat` which "plugs in" to an existing `Geom`? (e.g. `StatSalesperson` and `GeomSegment`)?
* Would a user rather have the ability to specify an alternate `Stat` or `Geom`?
* Which is easier? (typically, the `Stat` implementation)
* Do you need both?

:::


# Why extend?

## {data-menu-title="Why extend 1"}

Revisiting the traveling salesperson problem,
we saw previously that we can easily perform the necessary calculations outside of **ggplot2**;
avoiding the hassle of defining `GeomSalesperson` and friends:

```{r, eval = FALSE}
dist_mat <- dist(df, diag = TRUE, upper = TRUE)
atsp <- as.ATSP(dist_mat)
tour <- solve_TSP(atsp)

df_sorted <- df[tour,]

ggplot(df_sorted, aes(x, y)) +
  geom_path() +
  geom_point_new() 
```

## {data-menu-title="Why extend 2" auto-animate=true}

What if we want to plot multiple groups? 

```{r}
#| eval: false
df_mult <- data.frame(
  x = rnorm(3 * 10),
  y = rnorm(3 * 10),
  class = rep(c("a", "b", "c"), each = 10)
)
```

## {data-menu-title="Why extend 3" auto-animate=true}

What if we want to plot multiple groups? 

```{r}
#| include: false
set.seed(1)
```
```{r}
df_mult <- data.frame(
  x = rnorm(3 * 10),
  y = rnorm(3 * 10),
  class = rep(c("a", "b", "c"), each = 10)
)

df_mult
```

## {data-menu-title="Why extend 4"}

Split, Apply, Combine!

![](images/split-apply-combine.jpg){fig-align="center"}

## {data-menu-title="Why extend 5" auto-animate=true}

```{r}
#| eval: false
# Split

df_split <- split(df_mult[,c("x", "y")], df_mult$class)
```

## {data-menu-title="Why extend 6" auto-animate=true}

```{r}
# Split

df_split <- split(df_mult[,c("x", "y")], df_mult$class)

str(df_split)
```


## {data-menu-title="Why extend 7" auto-animate=true}

```{r}
# Split

df_split <- split(df_mult[,c("x", "y")], df_mult$class)

df_split$a
```

## {data-menu-title="Why extend 8" auto-animate=true}

```{r}
# Split

df_split <- split(df_mult[,c("x", "y")], df_mult$class)

df_split$b
```

## {data-menu-title="Why extend 9" auto-animate=true}

```{r}
# Split

df_split <- split(df_mult[,c("x", "y")], df_mult$class)

df_split$c
```

<!-- ## {auto-animate=true auto-animate-restart} -->
## {data-menu-title="Why extend 10" auto-animate=true}

```{r}
#| eval: false
# Apply

class_sols <-
  df_split |>
  lapply(dist, diag = TRUE, upper = TRUE) |>
  lapply(as.ATSP) |>
  lapply(solve_TSP) 
```

## {data-menu-title="Why extend 11" auto-animate=true}

```{r}
# Apply

class_sols <-
  df_split |>
  lapply(dist, diag = TRUE, upper = TRUE) |>
  lapply(as.ATSP) |>
  lapply(solve_TSP) 

str(class_sols)
```

## {data-menu-title="Why extend 12" auto-animate=true}

```{r}
# Apply

reorder_rows_by_indices <- function(df, i) df[i,]
df_split_ordered <- Map(reorder_rows_by_indices, df_split, class_sols) 
```

## {data-menu-title="Why extend 13" auto-animate=true}

```{r}
# Apply

reorder_rows_by_indices <- function(df, i) df[i,]
df_split_ordered <- Map(reorder_rows_by_indices, df_split, class_sols) 

str(df_split_ordered)
```

## {data-menu-title="Why extend 14" auto-animate=true}

```{r}
# Apply

reorder_rows_by_indices <- function(df, i) df[i,]
df_split_ordered <- Map(reorder_rows_by_indices, df_split, class_sols) 

df_split_ordered$a
```

## {data-menu-title="Why extend 15" auto-animate=true}

```{r}
# Apply

reorder_rows_by_indices <- function(df, i) df[i,]
df_split_ordered <- Map(reorder_rows_by_indices, df_split, class_sols) 

df_split_ordered$b
```

## {data-menu-title="Why extend 16" auto-animate=true}

```{r}
# Apply

reorder_rows_by_indices <- function(df, i) df[i,]
df_split_ordered <- Map(reorder_rows_by_indices, df_split, class_sols) 

df_split_ordered$c
```

## {data-menu-title="Why extend 17" auto-animate=true}

```{r}
#| eval: false
# Combine

df_mult_ordered <- unsplit(df_split_ordered, df_mult$class)
df_mult_ordered$class <- df_mult$class
```

## {data-menu-title="Why extend 18" auto-animate=true}

```{r}
# Combine

df_mult_ordered <- unsplit(df_split_ordered, df_mult$class)
df_mult_ordered$class <- df_mult$class
  
df_mult_ordered
```

## {data-menu-title="Why extend 19"}

```{r}
ggplot(df_mult_ordered, aes(x, y)) +
  geom_path() +
  geom_point_new() +
  facet_wrap(vars(class))
```

## {data-menu-title="Why extend 20"}

:::{.r-stack}

:::{.fragment .semi-fade-out fragment-index=1}
```{r}
#| eval: false
# Split
df_split <- split(df_mult[,c("x", "y")], df_mult$class)

# Apply
class_sols <-
  df_split |>
  lapply(dist, diag = TRUE, upper = TRUE) |>
  lapply(as.ATSP) |>
  lapply(solve_TSP) 

reorder_rows_by_indices <- function(df, i) df[i,]
df_split_ordered <- Map(reorder_rows_by_indices, df_split, class_sols) 

# Combine
df_mult_ordered <- unsplit(df_split_ordered, df_mult$class)
df_mult_ordered$class <- df_mult$class
```
:::

:::{.fragment fragment-index=1}
:::{.callout-note appearance="simple" icon=false}
Instead, we can let **ggplot2** do this for us!
:::
:::

:::

## {data-menu-title="Why extend 21"}

```{r}
ggplot(df_mult, aes(x, y)) +
  geom_salesperson() +
  geom_point_new() +
  facet_wrap(vars(class)) 
```


## {data-menu-title="Why extend 22"}

:::{.r-stack}

:::{.fragment .semi-fade-out fragment-index=1}
```{r}
ggplot(df_mult, aes(x, y)) +
  geom_salesperson(linewidth = 2, color = "firebrick") +
  geom_complete(alpha = .3) +
  geom_point_new(size = 3) +
  facet_wrap(vars(class)) +
  theme_minimal()
```
:::

:::{.fragment fragment-index=1}

:::{.callout-note appearance="simple"}
## Understanding the internals

**ggplot2** is using the same split-apply-combine strategy for each layer, 
`$compute_layer()` and `$draw_layer()` methods call `$compute_panel()` or `$draw_panel()` for each `class`!
:::

:::

:::

## {data-menu-title="Why extend 23"}

```{r}
#| code-line-numbers: "1|8-25|17|21" 
GeomComplete$draw_layer
```

## {data-menu-title="Why extend 24"}

```{r}
#| code-line-numbers: "1|8-26|19|21" 
StatSalesperson$compute_layer
```

# Additional Resources

## {data-menu-title="Resource List" .smaller}

* [**ggplot2**: Elegant Graphics for Data Analysis](https://ggplot2-book.org/) by Hadley Wickham
  * The third edition has a [chapter](https://ggplot2-book.org/extensions.html) on writing extensions
* [`vignette("extending-ggplot2")`](https://cran.r-project.org/web/packages/ggplot2/vignettes/extending-ggplot2.html)
* **ggplot2**'s [source code](https://github.com/tidyverse/ggplot2)
  * Also, the source code of **ggplot2** [extensions](https://exts.ggplot2.tidyverse.org/gallery/)
* [R Graphics](https://www.stat.auckland.ac.nz/~paul/RG2e/) by Paul Murrell

# Details

## `coord$transform()`
```{r}
#| code-line-numbers: "|1,13|1,16-19" 
GeomPoint$draw_panel
```


## {data-menu-title="coord$transform() 1" auto-animate=true transition=fade}

```{r, echo = FALSE}

df <- data.frame(
  x = 1:10,
  y = 1:10
) 

p1 <- ggplot(df, aes(x, y)) +
  geom_point()

p2 <- ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )

df_rescaled <- df |>
  mutate(
    x = scales::rescale(x, to = c(0, 1), from = c(.55, 10.45)),
    y = scales::rescale(y, to = c(0, 1), from = c(.55, 10.45))
  )
```

:::: {.columns}

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1
```
:::

::::

## {data-menu-title="coord$transform() 2" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

# Question 1: what is the "range" 
# of the plot along each axis?

ggplot(df, aes(x, y)) +
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1
```
:::

::::


## {data-menu-title="coord$transform() 3" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

range(df$x)
#> [1]  1  10

range(df$y)
#> [1]  1  10

ggplot(df, aes(x, y)) +
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1 
```
:::

::::

## {data-menu-title="coord$transform() 4" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

range(df$x)
#> [1]  1  10

range(df$y)
#> [1]  1  10

ggplot(df, aes(x, y)) +
  geom_point() +
  geom_rect(
    xmin = 1, xmax = 10,
    ymin = 1, ymax = 10,
    color = "red", fill = NA
  )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1 +
  geom_rect(
    xmin = 1, xmax = 10,
    ymin = 1, ymax = 10,
    color = "red", fill = NA
  )
```
:::

::::

## {data-menu-title="coord$transform() 5" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

range(df$x)
#> [1]  1  10

range(df$y)
#> [1]  1  10

# default from scale_x/y_continuous()
scales::expand_range(c(1, 10), .05)
#> [1]  0.55 10.45

ggplot(df, aes(x, y)) +
  geom_point() 
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1
```
:::

::::

## {data-menu-title="coord$transform() 6" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

range(df$x)
#> [1]  1  10

range(df$y)
#> [1]  1  10

# default from scale_x/y_continuous()
scales::expand_range(c(1, 10), .05)
#> [1]  0.55 10.45

ggplot(df, aes(x, y)) +
  geom_point() +
  geom_rect(
    xmin = .55, xmax = 10.45,
    ymin = .55, ymax = 10.45,
    color = "red", fill = NA,
    linewidth = 1
  )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1 +
  geom_rect(
    xmin = .55, xmax = 10.45,
    ymin = .55, ymax = 10.45,
    color = "red", fill = NA,
    linewidth = 1
  )
```
:::

::::

## {data-menu-title="coord$transform() 7" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

# Question 2: how do we specify
# where graphical primitives go?

ggplot(df, aes(x, y)) +
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1
```
:::

::::

## {data-menu-title="coord$transform() 8" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()

grid::grid.points(x = 1, y = 1)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1

grid::grid.points(x = 1, y = 1)
```
:::

::::

## {data-menu-title="coord$transform() 9" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()

grid::grid.points(x = 1, y = 1)
grid::grid.points(x = 10, y = 10)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1

grid::grid.points(x = 1, y = 1)
grid::grid.points(x = 10, y = 10)
```
:::

::::

## {data-menu-title="coord$transform() 10" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()

grid::grid.points(x = 1, y = 1)
grid::grid.points(x = 10, y = 10)
grid::grid.points(x = 100, y = 100)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1

grid::grid.points(x = 1, y = 1)
grid::grid.points(x = 10, y = 10)
grid::grid.points(x = 100, y = 100)
```
:::

::::


## {data-menu-title="coord$transform() 11" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1
```
:::

::::

## {data-menu-title="coord$transform() 12" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)
```
:::

::::

## {data-menu-title="coord$transform() 13" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() 

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)

grid::grid.points(
  x = grid::unit(c(0, 0, 1, 1), "npc"),
  y = grid::unit(c(0, 1, 0, 1), "npc"),
  gp = grid::gpar(col = "red")
)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)

grid::grid.points(
  x = grid::unit(c(0, 0, 1, 1), "npc"),
  y = grid::unit(c(0, 1, 0, 1), "npc"),
  gp = grid::gpar(col = "red")
)
```
:::

::::

## {data-menu-title="coord$transform() 14" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2
```
:::

::::

## {data-menu-title="coord$transform() 15" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)
```
:::

::::

## {data-menu-title="coord$transform() 16" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)

grid::grid.points(
  x = grid::unit(c(0, 0, 1, 1), "npc"),
  y = grid::unit(c(0, 1, 0, 1), "npc"),
  gp = grid::gpar(col = "red")
)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)

grid::grid.points(
  x = grid::unit(c(0, 0, 1, 1), "npc"),
  y = grid::unit(c(0, 1, 0, 1), "npc"),
  gp = grid::gpar(col = "red")
)
```
:::

::::



## {data-menu-title="coord$transform() 17" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2
```
:::

::::
## {data-menu-title="coord$transform() 18" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )

# transform from the data coordinates 
# to the plotting coordinates (npc)
df_rescaled <- df |>
  mutate(
    x = scales::rescale(x, 
      to = c(0, 1), from = c(.55, 10.45)),
    y = scales::rescale(y, 
      to = c(0, 1), from = c(.55, 10.45))
  )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2

df_rescaled <- df |>
  mutate(
    x = scales::rescale(x, to = c(0, 1), from = c(.55, 10.45)),
    y = scales::rescale(y, to = c(0, 1), from = c(.55, 10.45))
  )
```
:::

::::

## {data-menu-title="coord$transform() 19" auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )

# transform from the data coordinates 
# to the plotting coordinates (npc)
df_rescaled <- df |>
  mutate(
    x = scales::rescale(x, 
      to = c(0, 1), from = c(.55, 10.45)),
    y = scales::rescale(y, 
      to = c(0, 1), from = c(.55, 10.45))
  )

grid::grid.points(
  x = grid::unit(df_rescaled$x, "npc"),
  y = grid::unit(df_rescaled$y, "npc")
)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2

df_rescaled <- df |>
  mutate(
    x = scales::rescale(x, to = c(0, 1), from = c(.55, 10.45)),
    y = scales::rescale(y, to = c(0, 1), from = c(.55, 10.45))
  )

grid::grid.points(
  x = grid::unit(df_rescaled$x, "npc"),
  y = grid::unit(df_rescaled$y, "npc")
)
```
:::

::::

## {data-menu-title="coord$transform() 20"}

```{r}
#| code-line-numbers: "1,13" 
GeomPoint$draw_panel
```

## {data-menu-title="coord$transform() 21"}

```{r}
#| code-line-numbers: "|1,10-11" 
ggplot2:::CoordCartesian$transform
```

## {data-menu-title="coord$transform() 22"}

```{r}
#| eval: false
#| code-line-numbers: "|5,14" 
# Can debug interactively with {ggtrace}
# to learn about `panel_params$x/y$rescale()`
ggtrace::ggdebugonce(ggplot2:::CoordCartesian$transform)

panel_params$x$rescale
#> <ggproto method>
#>   <Wrapper function>
#>   function (...) 
#>     rescale(..., self = self)
#> 
#>   <Inner function (f)>
#>     function (self, x) 
#> {
#>     self$scale$rescale(x, self$limits, self$continuous_range)
#> }
```

<!-- --- -->

<!-- :::{.r-stack} -->

<!-- :::{.fragment .fade-out fragment-index=1} -->
<!-- :::{.callout-tip .callout-code appearance="simple" icon=false} -->
<!-- ```{r} -->
<!-- #| eval: false -->
<!-- #| code-line-numbers: "10"  -->
<!-- ggplot(df, aes(x, y)) + -->
<!--   geom_point() + -->
<!--   theme( -->
<!--     axis.title = element_blank(), -->
<!--     axis.text = element_blank(), -->
<!--     axis.ticks.length = unit(0, "npc"), -->
<!--     plot.margin = margin() -->
<!--   ) -->

<!-- grid::grid.points(x = grid::unit(1/2, "npc"), y = grid::unit(1/2, "npc")) -->
<!-- ``` -->
<!-- ::: -->
<!-- ::: -->


<!-- ```{r} -->
<!-- #| echo: false -->
<!-- #| fig-height: 6 -->
<!-- p2 -->
<!-- grid::grid.points(x = grid::unit(1/2, "npc"), y = grid::unit(1/2, "npc")) -->
<!-- ``` -->

<!-- ::: -->

## Prototypes

* Technically, `Stat`s and `Geom`s are not classes; they are prototypes.

::: {.fragment}
* This does not come up frequently, but it can lead to unexpected behavior 
:::

## {data-menu-title="Prototypes 1"}

```{r}
#| code-line-numbers: "1-2|4-7|9-31" 
is.environment(GeomComplete)

# Only see what we set, not what we inherited:
ls(GeomComplete)

GeomComplete$draw_layer
```
## {data-menu-title="Prototypes 2"}

```{r}
#| code-line-numbers: "1-3|5-7|9-11" 
A <- ggproto("A", NULL,
  x = 1
)

B <- ggproto("B", A)
B$x

A$x <- 3
B$x
```

