---
format: 
  revealjs:
    theme: [simple, presentation.css]
    auto-animate-easing: ease-in-out
    footer: "James Otto (Baylor University)"
    self-contained: false
    slide-number: true
    df-print: paged
knitr:
  opts_chunk: 
    fig-format: png
    echo: true
    collapse: true
    comment: "#>"
---


```{r setup_environment}
#| include: false
library("here")
library("tidyverse") 
library("patchwork")
library("ggdensity")

theme_set(theme_bw(13)) 
theme_update(
  panel.grid.minor = element_blank()
)

# Masking default method to hide rownames (mildly dangerous!)
# print.data.frame <- \(x) base::print.data.frame(x, row.names = FALSE)

```

# Introduction

---

<!-- TODO: -->
Go through examples of **ggplot2** extensions

# A first look at **ggproto** objects

## {auto-animate=true}

```{r}
df <- data.frame(
  x = rnorm(10),
  y = rnorm(10)
)
```

## {auto-animate=true}
```{r}
#| include: false
set.seed(1)
```
```{r}
df <- data.frame(
  x = rnorm(10),
  y = rnorm(10)
)

df
```

---

```{r}
library("ggplot2")

ggplot(df, aes(x, y)) +
  geom_point()
```

---

```{r, class.output = "r"}
#| code-line-numbers: "false" 
#| comment: ""
#| collapse: false

geom_point
```

---

```{r}
ggplot(df, aes(x, y)) +
  layer(geom = GeomPoint, stat = StatIdentity, position = "identity")
```

---

**ggplot2** is built on the ggproto object oriented system.

`GeomPoint` is an object with methods and fields that encode the relevant 
procedures and defaults to create a scatterplot.

---

```{r}
#| code-line-numbers: "|4" 
GeomPoint
```

---

```{r}
GeomPoint$default_aes
```

---

```{r}
#| code-line-numbers: "8" 
GeomPoint
```

---

<!-- Slightly out of order to get caught up in details on Geoms here: coord$transform() and pointsGrob() -->
<!-- Just point out, mention that we'll look more at these ideas later when we make our own Geom class -->
```{r}
#| code-line-numbers: "|1,8-19|1,13|1,16-19" 
GeomPoint$draw_panel
```
<!-- "Graphical primitives" -->

---

It is simple to extend via inheritance,
creating `GeomPointNew` from `GeomPoint` with a few adjustments to the default aesthetic options.


:::{.fragment}

<!-- Maybe explain what `ggproto()` is? -->

```{r}
GeomPointNew <- ggproto("GeomPointNew", GeomPoint,
                        
  default_aes = aes(
    shape = 21,
    colour = "black",
    size = 2,
    fill = "slateblue",
    alpha = NA,
    stroke = .5
  )
  
)
```

:::

---

```{r}
#| code-line-numbers: "|4" 
GeomPointNew
```

---

```{r}
GeomPointNew$default_aes
```

---

```{r}
#| code-line-numbers: "8" 
GeomPointNew
```

---

```{r}
#| code-line-numbers: "|1,8-19" 
GeomPointNew$draw_panel
```

---

```{r}
ggplot(df, aes(x, y)) +
  layer(geom = GeomPointNew, stat = StatIdentity, position = "identity")
```

---

```{r}
geom_point_new <- function(mapping = NULL, data = NULL, 
                           stat = "identity", position = "identity", 
                           ...,
                           na.rm = FALSE,
                           show.legend = NA,
                           inherit.aes = TRUE) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomPointNew,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      na.rm = na.rm,
      ...
    )
  )
}
```

---

```{r}
ggplot(df, aes(x, y)) +
  geom_point_new()
```


# Extending stats 

---

<!-- TODO: -->
Introduce travelling salesperson problem with simple graphics

## {auto-animate=true}

```{r}
library("TSP")

dist_mat <- dist(df, diag = TRUE, upper = TRUE)
atsp <- as.ATSP(dist_mat)
tour <- solve_TSP(atsp)
```

## {auto-animate=true}

```{r}
library("TSP")

dist_mat <- dist(df, diag = TRUE, upper = TRUE)
atsp <- as.ATSP(dist_mat)
tour <- solve_TSP(atsp)

tour
```

## {auto-animate=true}

```{r}
library("TSP")

dist_mat <- dist(df, diag = TRUE, upper = TRUE)
atsp <- as.ATSP(dist_mat)
tour <- solve_TSP(atsp)

str(tour)
```


## {auto-animate=true}

```{r}
df_sorted <- df[tour,]
```

## {auto-animate=true}

```{r}
df_sorted <- df[tour,]

df_sorted
```

---

```{r}
ggplot(df_sorted, aes(x, y)) +
  geom_path() +
  geom_point_new() 

```

---

```{r}
StatSalesperson <- ggproto("StatSalesperson", Stat,
                           
  compute_group = function(data, scales) {
    
    dist_mat <- dist(data[,c("x", "y")], diag = TRUE, upper = TRUE)
    atsp <- as.ATSP(dist_mat)
    tour <- solve_TSP(atsp)
    
    data[tour,]
    
  },
  
  required_aes = c("x", "y")                     
)
```

---

```{r}
stat_salesperson <- function(mapping = NULL, data = NULL, 
                       geom = GeomPath, position = "identity",
                       ...,
                       na.rm = FALSE, 
                       show.legend = NA, 
                       inherit.aes = TRUE) {
  layer(
    stat = StatSalesperson, data = data, mapping = mapping, geom = geom, 
    position = position, show.legend = show.legend, inherit.aes = inherit.aes,
    params = list(na.rm = na.rm, ...)
  )
}
```

---

```{r}
ggplot(df, aes(x, y)) +
  stat_salesperson() +
  geom_point_new() 

```

---

```{r}
StatSalesperson <- ggproto("StatSalesperson",  Stat,
                           
  compute_group = function(data, scales, method = "nearest_insertion") {
    
    dist_mat <- dist(data[,c("x", "y")], diag = TRUE, upper = TRUE)
    atsp <- as.ATSP(dist_mat)
    tour <- solve_TSP(atsp, method)
    
    data[tour,]
    
  },
  
  required_aes = c("x", "y")                     
)
```

---

```{r}
stat_salesperson <- function(mapping = NULL, data = NULL, 
                       geom = GeomPath, position = "identity",
                       ...,
                       method = "nearest_insertion",
                       na.rm = FALSE, 
                       show.legend = NA, 
                       inherit.aes = TRUE) {
  layer(
    stat = StatSalesperson, 
    data = data,
    mapping = mapping,
    geom = geom,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      method = method,
      na.rm = na.rm,
      ...
    )
  )
}
```

---

```{r}
ggplot(df, aes(x, y)) +
  stat_salesperson(method = "identity") +
  geom_point_new() 
```

---

```{r}
ggplot(df, aes(x, y)) +
  stat_salesperson(method = "random") +
  geom_point_new() 
```

---

```{r}
ggplot(df, aes(x, y)) +
  stat_salesperson() +
  geom_point_new() 
```

---

```{r}
GeomSalesperson <- ggproto("GeomSalesperson", GeomPath)

geom_salesperson <- function(mapping = NULL, data = NULL, 
                             stat = StatSalesperson, position = "identity", 
                             ...,
                             na.rm = FALSE,
                             show.legend = NA,
                             inherit.aes = TRUE) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomSalesperson,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      na.rm = na.rm,
      ...
    )
  )
}

```

---

```{r}
ggplot(df, aes(x, y)) +
  geom_salesperson() +
  geom_point_new() 

```

<!-- --- -->

<!-- Note: generally, it's good to pick defaults that match up with defaults in **ggplot2** functions.  -->
<!-- I'm specifically choosing alternative values to demonstrate how things can be changed. -->


# Extending geoms (complete graphs)

## A note on "Grobs" 

::: {.incremental}

* Grobs are the fundamental building blocks of graphics in R[^1],
the "graphical primitives".
* These are the objects **ggplot2**'s `Geom` classes
use to "draw".

:::

[^1]: Paul Murrell's ["R Graphics"](https://www.stat.auckland.ac.nz/~paul/RG2e/) is a good resource to learn more about Grobs (and more generally, **grid**)

---

```{r}
#| fig-align: "center"
line_segments <- 
  grid::segmentsGrob(
    x0 = seq(.1,  .9,  length = 10),
    x1 = seq(.15, .95, length = 10),
    y0 = rep(.05,      length = 10),
    y1 = rep(.95,      length = 10)
  )

grid::grid.draw(line_segments)
```

---

```{r}
#| code-line-numbers: "|1,19-23" 
GeomSegment$draw_panel
```


<!-- ## {transition="fade"} -->

<!-- ```{r} -->
<!-- #| fig-align: "center" -->
<!-- # `grid.*()` is equivalent to `*Grob()` |> `grid.draw()` -->
<!-- # (we will need this later) -->

<!-- grid::grid.segments( -->
<!--   x0 = seq(.1,  .9,  length = 10), -->
<!--   x1 = seq(.15, .95, length = 10), -->
<!--   y0 = rep(.05,      length = 10), -->
<!--   y1 = rep(.95,      length = 10) -->
<!-- ) -->
<!-- ``` -->


---

<!-- TODO: -->
<!-- Consider moving this to the beginning,  -->
<!-- intro to grobs to after hand-crafted ex, -->
<!-- remove body of GeomSegments$draw_panel -->

![](images/CompleteGraphs.svg){fig-align="center"}

---

```{r}
df_expanded <- df[rep(1:nrow(df), each = nrow(df)), ]

df_expanded
```

---

```{r}
df_expanded$xend <- rep(df$x, times = nrow(df))
df_expanded$yend <- rep(df$y, times = nrow(df))

df_expanded
```

---

```{r}
ggplot(df_expanded, aes(x, y, xend = xend, yend = yend)) +
  geom_segment()
```

---

```{r}
#| code-line-numbers: "|3|5-12|14-32|16-18|20|22-30|34" 
GeomComplete <- ggproto("GeomComplete", Geom,
                        
  required_aes = c("x", "y"),
  
  default_aes = aes(
    colour = "black",
    linewidth = 0.5,
    linetype = 1,
    alpha = NA
  ),
  
  non_missing_aes = c("linetype", "linewidth", "shape"),
  
  draw_panel = function(data, panel_params, coord) {
    
    data_expanded <- data[rep(1:nrow(data), each = nrow(data)), ]
    data_expanded$xend <- rep(data$x, times = nrow(data))
    data_expanded$yend <- rep(data$y, times = nrow(data))
    
    coord <- coord$transform(data_expanded, panel_params)
    
    grid::segmentsGrob(coord$x, coord$y, coord$xend, coord$yend,
      default.units = "native",
      gp = grid::gpar(
        col = alpha(coord$colour, coord$alpha),
        fill = alpha(coord$colour, coord$alpha),
        lwd = coord$linewidth * .pt,
        lty = coord$linetype
      )
    )
    
  },
 
  draw_key = draw_key_path
  
)
```

---

```{r}
geom_complete <- function(mapping = NULL, data = NULL, 
                          stat = StatIdentity, position = "identity", 
                          ...,
                          na.rm = FALSE,
                          show.legend = NA,
                          inherit.aes = TRUE) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomComplete,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      na.rm = na.rm,
      ...
    )
  )
}
```

---

:::{.r-stack}

:::{.fragment .semi-fade-out fragment-index=1}

```{r}
ggplot(df, aes(x, y)) +
  geom_complete()
```
:::

:::{.fragment fragment-index=1}

:::{.callout-note appearance="simple"}
## A classic question

Is this a statistical transformation or a graphical operation?
:::

:::

:::

---

### An aside: `Stat` vs `Geom` implementations 

* `Stat`s are used for transformations[^2] of data
* `Geom`s are used for converting data structures into their visual representations[^3]

[^2]: sometimes these are statistical transformations
[^3]: and "simple" transformations of data

---

### An aside: `Stat` vs `Geom` implementations 

::: {.incremental style="size: .7em"}

Things to consider when deciding which to implement:

* Can you implement a `Stat` which "plugs in" to an existing `Geom`? (e.g. `StatSalesperson` and `GeomSegment`)?
* Would a user rather have the ability to specify an alternate `Stat` or `Geom`?
* Which is easier? (typically, the `Stat` implementation)

:::


# Why extend?


---

Revisiting the traveling salesperson problem,
we saw previously that we can easily perform the necessary calculations outside of **ggplot2**;
avoiding the hassle of defining `GeomSalesperson` and friends:

```{r, eval = FALSE}
dist_mat <- dist(df, diag = TRUE, upper = TRUE)
atsp <- as.ATSP(dist_mat)
tour <- solve_TSP(atsp)

df_sorted <- df[tour,]

ggplot(df_sorted, aes(x, y)) +
  geom_path() +
  geom_point_new() 
```

## {auto-animate=true}

What if we want to plot multiple groups? 

```{r}
#| eval: false
df_mult <- data.frame(
  x = rnorm(3 * 10),
  y = rnorm(3 * 10),
  class = rep(c("a", "b", "c"), each = 10)
)
```

## {auto-animate=true}

What if we want to plot multiple groups? 

```{r}
#| include: false
set.seed(1)
```
```{r}
df_mult <- data.frame(
  x = rnorm(3 * 10),
  y = rnorm(3 * 10),
  class = rep(c("a", "b", "c"), each = 10)
)

df_mult
```

---

Split-Apply-Combine!

<!-- TODO: -->
Insert graphic here, along with reference
https://vita.had.co.nz/papers/plyr.pdf

## {auto-animate=true}

```{r}
#| eval: false
# Split

df_mult_split <- split(df_mult[,c("x", "y")], df_mult$class)
```

## {auto-animate=true}

```{r}
# Split

df_mult_split <- split(df_mult[,c("x", "y")], df_mult$class)

str(df_mult_split)
```


## {auto-animate=true}

```{r}
# Split

df_mult_split <- split(df_mult[,c("x", "y")], df_mult$class)

df_mult_split$a
```

## {auto-animate=true}

```{r}
# Split

df_mult_split <- split(df_mult[,c("x", "y")], df_mult$class)

df_mult_split$b
```

## {auto-animate=true}

```{r}
# Split

df_mult_split <- split(df_mult[,c("x", "y")], df_mult$class)

df_mult_split$c
```

<!-- ## {auto-animate=true auto-animate-restart} -->
## {auto-animate=true}

```{r}
#| eval: false
# Apply

class_sols <-
  df_mult_split |>
  lapply(dist, diag = TRUE, upper = TRUE) |>
  lapply(as.ATSP) |>
  lapply(solve_TSP) 
```

## {auto-animate=true}

```{r}
# Apply

class_sols <-
  df_mult_split |>
  lapply(dist, diag = TRUE, upper = TRUE) |>
  lapply(as.ATSP) |>
  lapply(solve_TSP) 

str(class_sols)
```

## {auto-animate=true}

```{r}
#| eval: false
# Apply

reorder_rows_by_indices <- function(df, i) df[i,]
df_mult_split <- Map(reorder_rows_by_indices, df_mult_split, class_sols) 
```

## {auto-animate=true}

```{r}
# Apply

reorder_rows_by_indices <- function(df, i) df[i,]
df_mult_split_ordered <- Map(reorder_rows_by_indices, df_mult_split, class_sols) 

str(df_mult_split_ordered)
```

## {auto-animate=true}

```{r}
# Apply

reorder_rows_by_indices <- function(df, i) df[i,]
df_mult_split_ordered <- Map(reorder_rows_by_indices, df_mult_split, class_sols) 

df_mult_split_ordered$a
```

## {auto-animate=true}

```{r}
# Apply

reorder_rows_by_indices <- function(df, i) df[i,]
df_mult_split_ordered <- Map(reorder_rows_by_indices, df_mult_split, class_sols) 

df_mult_split_ordered$b
```

## {auto-animate=true}

```{r}
# Apply

reorder_rows_by_indices <- function(df, i) df[i,]
df_mult_split_ordered <- Map(reorder_rows_by_indices, df_mult_split, class_sols) 

df_mult_split_ordered$c
```

## {auto-animate=true}

```{r}
#| eval: false
# Combine

df_mult_ordered <- unsplit(df_mult_split_ordered, df_mult$class)
df_mult_ordered$class <- df_mult$class
```

## {auto-animate=true}

```{r}
# Combine

df_mult_ordered <- unsplit(df_mult_split_ordered, df_mult$class)
df_mult_ordered$class <- df_mult$class
  
df_mult_ordered
```

---

```{r}
ggplot(df_mult_ordered, aes(x, y)) +
  geom_path() +
  geom_point_new() +
  facet_wrap(vars(class))
```

---

:::{.r-stack}

:::{.fragment .semi-fade-out fragment-index=1}
```{r}
#| eval: false
# Split
df_mult_split <- split(df_mult[,c("x", "y")], df_mult$class)

# Apply
class_sols <-
  df_mult_split |>
  lapply(dist, diag = TRUE, upper = TRUE) |>
  lapply(as.ATSP) |>
  lapply(solve_TSP) 

reorder_rows_by_indices <- function(df, i) df[i,]
df_mult_split <- Map(reorder_rows_by_indices, df_mult_split, class_sols) 

# Combine
df_mult_ordered <- unsplit(df_mult_split, df_mult$class)
df_mult_ordered$class <- df_mult$class
```
:::

:::{.fragment fragment-index=1}
:::{.callout-note appearance="simple" icon=false}
Instead, we can let **ggplot2** do this for us!
:::
:::

:::

---

```{r}
ggplot(df_mult, aes(x, y)) +
  geom_salesperson() +
  geom_point_new() +
  facet_wrap(vars(class)) 
```


---

:::{.r-stack}

:::{.fragment .semi-fade-out fragment-index=1}
```{r}
ggplot(df_mult, aes(x, y)) +
  geom_salesperson(linewidth = 2, color = "firebrick") +
  geom_complete(alpha = .3) +
  geom_point_new(size = 3) +
  facet_wrap(vars(class)) +
  theme_minimal()
```
:::

:::{.fragment fragment-index=1}

:::{.callout-note appearance="simple"}
## Understanding the internals

**ggplot2** is using the same split-apply-combine strategy for each layer, 
`$compute_layer()` and `$draw_layer()` methods call `$compute_panel()` or `$draw_panel()` for each `class`!
:::

:::

:::

---

```{r}
#| code-line-numbers: "1|8-25|17|21" 
GeomComplete$draw_layer
```

---

```{r}
#| code-line-numbers: "1|8-26|19|21" 
StatSalesperson$compute_layer
```

# Details

## `coord$transform()`
```{r}
#| code-line-numbers: "|1,13|1,16-19" 
GeomPoint$draw_panel
```


## {auto-animate=true transition=fade}

```{r, echo = FALSE}

df <- data.frame(
  x = 1:10,
  y = 1:10
) 

p1 <- ggplot(df, aes(x, y)) +
  geom_point()

p2 <- ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )

df_rescaled <- df |>
  mutate(
    x = scales::rescale(x, to = c(0, 1), from = c(.55, 10.45)),
    y = scales::rescale(y, to = c(0, 1), from = c(.55, 10.45))
  )
```

:::: {.columns}

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

# Question 1: what is the "range" 
# of the plot along each axis?

ggplot(df, aes(x, y)) +
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1
```
:::

::::


## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

range(df$x)
#> [1]  1  10

range(df$y)
#> [1]  1  10

ggplot(df, aes(x, y)) +
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1 
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

range(df$x)
#> [1]  1  10

range(df$y)
#> [1]  1  10

ggplot(df, aes(x, y)) +
  geom_point() +
  geom_rect(
    xmin = 1, xmax = 10,
    ymin = 1, ymax = 10,
    color = "red", fill = NA
  )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1 +
  geom_rect(
    xmin = 1, xmax = 10,
    ymin = 1, ymax = 10,
    color = "red", fill = NA
  )
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

range(df$x)
#> [1]  1  10

range(df$y)
#> [1]  1  10

# default from scale_x/y_continuous()
scales::expand_range(c(1, 10), .05)
#> [1]  0.55 10.45

ggplot(df, aes(x, y)) +
  geom_point() 
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

range(df$x)
#> [1]  1  10

range(df$y)
#> [1]  1  10

# default from scale_x/y_continuous()
scales::expand_range(c(1, 10), .05)
#> [1]  0.55 10.45

ggplot(df, aes(x, y)) +
  geom_point() +
  geom_rect(
    xmin = .55, xmax = 10.45,
    ymin = .55, ymax = 10.45,
    color = "red", fill = NA,
    linewidth = 1
  )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1 +
  geom_rect(
    xmin = .55, xmax = 10.45,
    ymin = .55, ymax = 10.45,
    color = "red", fill = NA,
    linewidth = 1
  )
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

# Question 2: how do we specify
# where graphical primitives go?

ggplot(df, aes(x, y)) +
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()

grid::grid.points(x = 1, y = 1)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1

grid::grid.points(x = 1, y = 1)
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()

grid::grid.points(x = 1, y = 1)
grid::grid.points(x = 10, y = 10)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1

grid::grid.points(x = 1, y = 1)
grid::grid.points(x = 10, y = 10)
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()

grid::grid.points(x = 1, y = 1)
grid::grid.points(x = 10, y = 10)
grid::grid.points(x = 100, y = 100)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1

grid::grid.points(x = 1, y = 1)
grid::grid.points(x = 10, y = 10)
grid::grid.points(x = 100, y = 100)
```
:::

::::


## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point()

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() 

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)

grid::grid.points(
  x = grid::unit(c(0, 0, 1, 1), "npc"),
  y = grid::unit(c(0, 1, 0, 1), "npc"),
  gp = grid::gpar(col = "red")
)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p1

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)

grid::grid.points(
  x = grid::unit(c(0, 0, 1, 1), "npc"),
  y = grid::unit(c(0, 1, 0, 1), "npc"),
  gp = grid::gpar(col = "red")
)
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)

grid::grid.points(
  x = grid::unit(c(0, 0, 1, 1), "npc"),
  y = grid::unit(c(0, 1, 0, 1), "npc"),
  gp = grid::gpar(col = "red")
)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2

grid::grid.points(
  x = grid::unit(1/2, "npc"),
  y = grid::unit(1/2, "npc")
)

grid::grid.points(
  x = grid::unit(c(0, 0, 1, 1), "npc"),
  y = grid::unit(c(0, 1, 0, 1), "npc"),
  gp = grid::gpar(col = "red")
)
```
:::

::::



## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2
```
:::

::::
## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )

df_rescaled <- df |>
  mutate(
    x = scales::rescale(x, 
      to = c(0, 1), from = c(.55, 10.45)),
    y = scales::rescale(y, 
      to = c(0, 1), from = c(.55, 10.45))
  )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2

df_rescaled <- df |>
  mutate(
    x = scales::rescale(x, to = c(0, 1), from = c(.55, 10.45)),
    y = scales::rescale(y, to = c(0, 1), from = c(.55, 10.45))
  )
```
:::

::::

## {auto-animate=true transition=fade}

:::: {.columns }

::: {.column .column-code width="40%"}
```{r}
#| eval: false
df <- data.frame(
  x = 1:10,
  y = 1:10
) 

ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks.length = unit(0, "npc"),
    plot.margin = margin()
  )

df_rescaled <- df |>
  mutate(
    x = scales::rescale(x, 
      to = c(0, 1), from = c(.55, 10.45)),
    y = scales::rescale(y, 
      to = c(0, 1), from = c(.55, 10.45))
  )

grid::grid.points(
  x = grid::unit(df_rescaled$x, "npc"),
  y = grid::unit(df_rescaled$y, "npc")
)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-height: 8
p2

df_rescaled <- df |>
  mutate(
    x = scales::rescale(x, to = c(0, 1), from = c(.55, 10.45)),
    y = scales::rescale(y, to = c(0, 1), from = c(.55, 10.45))
  )

grid::grid.points(
  x = grid::unit(df_rescaled$x, "npc"),
  y = grid::unit(df_rescaled$y, "npc")
)
```
:::

::::

---

```{r}
#| code-line-numbers: "1,13" 
GeomPoint$draw_panel
```

---

```{r}
#| code-line-numbers: "|1,10-11" 
ggplot2:::CoordCartesian$transform
```

---

```{r}
#| eval: false
#| code-line-numbers: "|5,14" 
# Can debug interactively with {ggtrace}
# to learn about `panel_params$x/y$rescale()`
ggtrace::ggdebugonce(ggplot2:::CoordCartesian$transform)

panel_params$x$rescale
#> <ggproto method>
#>   <Wrapper function>
#>   function (...) 
#>     rescale(..., self = self)
#> 
#>   <Inner function (f)>
#>     function (self, x) 
#> {
#>     self$scale$rescale(x, self$limits, self$continuous_range)
#> }
```

<!-- --- -->

<!-- :::{.r-stack} -->

<!-- :::{.fragment .fade-out fragment-index=1} -->
<!-- :::{.callout-tip .callout-code appearance="simple" icon=false} -->
<!-- ```{r} -->
<!-- #| eval: false -->
<!-- #| code-line-numbers: "10"  -->
<!-- ggplot(df, aes(x, y)) + -->
<!--   geom_point() + -->
<!--   theme( -->
<!--     axis.title = element_blank(), -->
<!--     axis.text = element_blank(), -->
<!--     axis.ticks.length = unit(0, "npc"), -->
<!--     plot.margin = margin() -->
<!--   ) -->

<!-- grid::grid.points(x = grid::unit(1/2, "npc"), y = grid::unit(1/2, "npc")) -->
<!-- ``` -->
<!-- ::: -->
<!-- ::: -->


<!-- ```{r} -->
<!-- #| echo: false -->
<!-- #| fig-height: 6 -->
<!-- p2 -->
<!-- grid::grid.points(x = grid::unit(1/2, "npc"), y = grid::unit(1/2, "npc")) -->
<!-- ``` -->

<!-- ::: -->

## `Geom$setup_data()`
temp

---

temp

